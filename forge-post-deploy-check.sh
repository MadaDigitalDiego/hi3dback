#!/bin/bash

# Script de v√©rification post-d√©ploiement pour Laravel Forge
# Ce script v√©rifie que l'automatisation Meilisearch fonctionne correctement

set -e

echo "üîç V√©rification post-d√©ploiement - Automatisation Meilisearch"
echo "============================================================"

# Variables
SITE_PATH=${FORGE_SITE_PATH:-$(pwd)}
PHP_CMD=${FORGE_PHP:-php}
DOMAIN=${FORGE_SITE_DOMAIN:-localhost}

cd $SITE_PATH

# 1. V√©rifier la configuration Laravel
echo "1. üîß V√©rification de la configuration Laravel..."
CONFIG_CHECK=$($PHP_CMD artisan tinker --execute="echo config('scout.driver');" 2>/dev/null || echo "error")
if [ "$CONFIG_CHECK" = "meilisearch" ]; then
    echo "   ‚úÖ Scout configur√© sur Meilisearch"
else
    echo "   ‚ùå Scout n'est pas configur√© sur Meilisearch (actuel: $CONFIG_CHECK)"
    exit 1
fi

# 2. V√©rifier la connexion Meilisearch
echo "2. üåê Test de connexion Meilisearch..."
MEILISEARCH_HOST=$($PHP_CMD artisan tinker --execute="echo config('scout.meilisearch.host');" 2>/dev/null)
if curl -f -s "$MEILISEARCH_HOST/health" > /dev/null 2>&1; then
    echo "   ‚úÖ Meilisearch accessible √† $MEILISEARCH_HOST"
else
    echo "   ‚ùå Meilisearch non accessible √† $MEILISEARCH_HOST"
    exit 1
fi

# 3. V√©rifier les commandes Artisan
echo "3. üî® V√©rification des commandes Artisan..."
COMMANDS=("forge:index" "search:index" "search:flush" "meilisearch:reindex")
for cmd in "${COMMANDS[@]}"; do
    if $PHP_CMD artisan list | grep -q "$cmd"; then
        echo "   ‚úÖ Commande $cmd disponible"
    else
        echo "   ‚ùå Commande $cmd manquante"
    fi
done

# 4. Test d'indexation
echo "4. üìä Test d'indexation..."
echo "   Comptage des mod√®les..."
PROFILE_COUNT=$($PHP_CMD artisan tinker --execute="echo App\Models\ProfessionalProfile::count();" 2>/dev/null || echo "0")
OFFER_COUNT=$($PHP_CMD artisan tinker --execute="echo App\Models\ServiceOffer::count();" 2>/dev/null || echo "0")
ACHIEVEMENT_COUNT=$($PHP_CMD artisan tinker --execute="echo App\Models\Achievement::count();" 2>/dev/null || echo "0")

echo "   - Profils professionnels: $PROFILE_COUNT"
echo "   - Offres de service: $OFFER_COUNT"
echo "   - R√©alisations: $ACHIEVEMENT_COUNT"

if [ "$PROFILE_COUNT" -gt 0 ] || [ "$OFFER_COUNT" -gt 0 ] || [ "$ACHIEVEMENT_COUNT" -gt 0 ]; then
    echo "   ‚úÖ Donn√©es disponibles pour l'indexation"
    
    # Test d'indexation rapide
    echo "   üöÄ Test d'indexation rapide..."
    if timeout 60 $PHP_CMD artisan forge:index --check-health > /dev/null 2>&1; then
        echo "   ‚úÖ Indexation test r√©ussie"
    else
        echo "   ‚ö†Ô∏è  Indexation test √©chou√©e ou timeout"
    fi
else
    echo "   ‚ö†Ô∏è  Aucune donn√©e √† indexer"
fi

# 5. V√©rifier les t√¢ches cron
echo "5. ‚è∞ V√©rification des t√¢ches cron..."
if crontab -l 2>/dev/null | grep -q "forge:index"; then
    echo "   ‚úÖ T√¢ches cron d'indexation configur√©es"
else
    echo "   ‚ö†Ô∏è  T√¢ches cron d'indexation non trouv√©es"
    echo "   üí° Ajoutez ces t√¢ches dans Laravel Forge:"
    echo "      0 2 * * * cd $SITE_PATH && $PHP_CMD artisan forge:index --check-health"
    echo "      0 */6 * * * cd $SITE_PATH && $PHP_CMD artisan forge:index --check-health"
fi

# 6. Test de l'API de recherche
echo "6. üîç Test de l'API de recherche..."
if command -v curl >/dev/null 2>&1; then
    API_URL="https://$DOMAIN/api/search/stats"
    if curl -f -s "$API_URL" > /dev/null 2>&1; then
        echo "   ‚úÖ API de recherche accessible"
    else
        echo "   ‚ö†Ô∏è  API de recherche non accessible √† $API_URL"
    fi
else
    echo "   ‚ö†Ô∏è  curl non disponible pour tester l'API"
fi

# 7. V√©rifier les logs
echo "7. üìã V√©rification des logs r√©cents..."
if [ -f "storage/logs/laravel.log" ]; then
    ERROR_COUNT=$(tail -100 storage/logs/laravel.log | grep -c "ERROR" || echo "0")
    MEILISEARCH_LOGS=$(tail -100 storage/logs/laravel.log | grep -c "Meilisearch\|indexation" || echo "0")
    
    echo "   - Erreurs r√©centes: $ERROR_COUNT"
    echo "   - Logs Meilisearch r√©cents: $MEILISEARCH_LOGS"
    
    if [ "$ERROR_COUNT" -gt 10 ]; then
        echo "   ‚ö†Ô∏è  Beaucoup d'erreurs r√©centes d√©tect√©es"
    else
        echo "   ‚úÖ Niveau d'erreur acceptable"
    fi
else
    echo "   ‚ö†Ô∏è  Fichier de log non trouv√©"
fi

# 8. V√©rifier les queues (si configur√©es)
echo "8. üöÄ V√©rification des queues..."
QUEUE_CONNECTION=$($PHP_CMD artisan tinker --execute="echo config('queue.default');" 2>/dev/null || echo "sync")
echo "   Connection queue: $QUEUE_CONNECTION"

if [ "$QUEUE_CONNECTION" != "sync" ]; then
    FAILED_JOBS=$($PHP_CMD artisan queue:failed --format=json 2>/dev/null | wc -l || echo "0")
    echo "   - Jobs √©chou√©s: $FAILED_JOBS"
    
    if [ "$FAILED_JOBS" -gt 0 ]; then
        echo "   ‚ö†Ô∏è  Des jobs ont √©chou√©"
        echo "   üí° Ex√©cutez: php artisan queue:failed pour voir les d√©tails"
    else
        echo "   ‚úÖ Aucun job √©chou√©"
    fi
fi

# 9. R√©sum√© et recommandations
echo ""
echo "üìà R√©sum√© de la v√©rification:"
echo "================================"

# V√©rifier si tout est OK
ALL_OK=true

# V√©rifications critiques
if [ "$CONFIG_CHECK" != "meilisearch" ]; then ALL_OK=false; fi
if ! curl -f -s "$MEILISEARCH_HOST/health" > /dev/null 2>&1; then ALL_OK=false; fi

if [ "$ALL_OK" = true ]; then
    echo "‚úÖ Automatisation Meilisearch op√©rationnelle!"
    echo ""
    echo "üéâ Prochaines √©tapes:"
    echo "   1. Surveillez les logs d'indexation"
    echo "   2. Testez la recherche sur votre application"
    echo "   3. Configurez les notifications si souhait√©"
    echo ""
    echo "üìö Commandes utiles:"
    echo "   - Indexation manuelle: php artisan forge:index --check-health"
    echo "   - V√©rifier les stats: curl https://$DOMAIN/api/search/stats"
    echo "   - Voir les logs: tail -f storage/logs/laravel.log | grep Meilisearch"
else
    echo "‚ùå Des probl√®mes ont √©t√© d√©tect√©s!"
    echo ""
    echo "üîß Actions recommand√©es:"
    echo "   1. V√©rifiez la configuration Meilisearch dans .env"
    echo "   2. Assurez-vous que Meilisearch est accessible"
    echo "   3. Consultez les logs pour plus de d√©tails"
    echo "   4. Relancez ce script apr√®s corrections"
    exit 1
fi

echo ""
echo "‚úÖ V√©rification post-d√©ploiement termin√©e!"
