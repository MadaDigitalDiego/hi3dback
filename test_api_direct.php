<?php

require_once __DIR__ . '/vendor/autoload.php';

use App\Models\User;
use App\Models\File;
use App\Services\FileManagerService;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;

// Bootstrap Laravel
$app = require_once __DIR__ . '/bootstrap/app.php';
$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();

echo "üß™ Test Direct du Syst√®me de Gestion de Fichiers\n";
echo "===============================================\n\n";

try {
    // Fake storage pour les tests
    Storage::fake('public');
    
    // R√©cup√©rer l'utilisateur de test
    $user = User::where('email', 'test@hi3d.com')->first();
    if (!$user) {
        echo "‚ùå Utilisateur de test non trouv√©\n";
        echo "üí° Ex√©cutez d'abord: php create_test_user.php\n";
        exit(1);
    }
    
    echo "üë§ Utilisateur de test: {$user->email} (ID: {$user->id})\n\n";
    
    // Test 1: Instanciation du service
    echo "1. Test du FileManagerService...\n";
    $fileManagerService = app(FileManagerService::class);
    echo "   ‚úÖ Service instanci√©\n\n";
    
    // Test 2: Cr√©ation d'un fichier simul√©
    echo "2. Cr√©ation d'un fichier de test simul√©...\n";
    
    // Cr√©er un fichier temporaire r√©el
    $tempFile = tempnam(sys_get_temp_dir(), 'hi3d_test_');
    $testContent = "Ceci est un fichier de test pour Hi3D\nTaille: Petite\nType: text/plain\nTest: " . date('Y-m-d H:i:s');
    file_put_contents($tempFile, $testContent);
    
    // Cr√©er un UploadedFile simul√©
    $uploadedFile = new UploadedFile(
        $tempFile,
        'test_file.txt',
        'text/plain',
        null,
        true // test mode
    );
    
    echo "   ‚úÖ Fichier temporaire cr√©√©: " . basename($tempFile) . "\n";
    echo "   üìã Taille: " . filesize($tempFile) . " bytes\n";
    echo "   üìã Type MIME: text/plain\n\n";
    
    // Test 3: Upload via le service
    echo "3. Upload via FileManagerService...\n";
    $fileRecord = $fileManagerService->uploadFile($uploadedFile, $user);
    
    echo "   ‚úÖ Upload r√©ussi\n";
    echo "   üìã ID: {$fileRecord->id}\n";
    echo "   üìã Nom original: {$fileRecord->original_name}\n";
    echo "   üìã Nom fichier: {$fileRecord->filename}\n";
    echo "   üìã Taille: {$fileRecord->human_size}\n";
    echo "   üìã Type de stockage: {$fileRecord->storage_type}\n";
    echo "   üìã Statut: {$fileRecord->status}\n\n";
    
    // Test 4: V√©rification en base
    echo "4. V√©rification en base de donn√©es...\n";
    $dbFile = File::find($fileRecord->id);
    if ($dbFile) {
        echo "   ‚úÖ Fichier trouv√© en base\n";
        echo "   üìã User ID: {$dbFile->user_id}\n";
        echo "   üìã Cr√©√© le: {$dbFile->created_at}\n";
    } else {
        echo "   ‚ùå Fichier non trouv√© en base\n";
    }
    echo "\n";
    
    // Test 5: URL de t√©l√©chargement
    echo "5. Test de l'URL de t√©l√©chargement...\n";
    $downloadUrl = $fileManagerService->getDownloadUrl($fileRecord);
    if ($downloadUrl) {
        echo "   ‚úÖ URL g√©n√©r√©e: {$downloadUrl}\n";
    } else {
        echo "   ‚ùå Impossible de g√©n√©rer l'URL\n";
    }
    echo "\n";
    
    // Test 6: Statistiques
    echo "6. Test des statistiques...\n";
    $stats = $fileManagerService->getStorageStats();
    echo "   ‚úÖ Statistiques r√©cup√©r√©es:\n";
    foreach ($stats as $key => $value) {
        echo "      - {$key}: {$value}\n";
    }
    echo "\n";
    
    // Test 7: Upload multiple
    echo "7. Test d'upload multiple...\n";
    
    // Cr√©er plusieurs fichiers de test
    $files = [];
    for ($i = 1; $i <= 3; $i++) {
        $tempFile = tempnam(sys_get_temp_dir(), "hi3d_multi_{$i}_");
        file_put_contents($tempFile, "Fichier de test multiple #{$i}\nContenu: " . str_repeat("Test ", $i * 10));
        
        $files[] = new UploadedFile(
            $tempFile,
            "test_multi_{$i}.txt",
            'text/plain',
            null,
            true
        );
    }
    
    $multiResult = $fileManagerService->uploadMultipleFiles($files, $user);
    echo "   ‚úÖ Upload multiple r√©ussi\n";
    echo "   üìä Total: {$multiResult['total']}\n";
    echo "   üìä R√©ussis: {$multiResult['successful']}\n";
    echo "   üìä √âchecs: {$multiResult['failed']}\n\n";
    
    // Test 8: Suppression
    echo "8. Test de suppression...\n";
    $deleted = $fileManagerService->deleteFile($fileRecord);
    if ($deleted) {
        echo "   ‚úÖ Fichier supprim√© avec succ√®s\n";
    } else {
        echo "   ‚ùå √âchec de la suppression\n";
    }
    echo "\n";
    
    // Test 9: Statistiques finales
    echo "9. Statistiques finales...\n";
    $finalStats = $fileManagerService->getStorageStats();
    echo "   üìä Fichiers restants: {$finalStats['total_files']}\n";
    echo "   üìä Fichiers compl√©t√©s: {$finalStats['completed_files']}\n\n";
    
    // Nettoyage
    echo "üßπ Nettoyage...\n";
    File::where('user_id', $user->id)->delete();
    echo "   ‚úÖ Fichiers de test supprim√©s\n\n";
    
    echo "üéâ Tous les tests sont pass√©s avec succ√®s !\n";
    echo "Le syst√®me de gestion de fichiers fonctionne parfaitement.\n\n";
    
    echo "üìù R√©sum√© des fonctionnalit√©s test√©es:\n";
    echo "   ‚úÖ Instanciation du service\n";
    echo "   ‚úÖ Upload de fichier unique\n";
    echo "   ‚úÖ Stockage en base de donn√©es\n";
    echo "   ‚úÖ G√©n√©ration d'URL de t√©l√©chargement\n";
    echo "   ‚úÖ Statistiques de stockage\n";
    echo "   ‚úÖ Upload multiple\n";
    echo "   ‚úÖ Suppression de fichier\n";
    echo "   ‚úÖ Nettoyage automatique\n\n";
    
    echo "üöÄ Le syst√®me est pr√™t pour la production !\n";

} catch (Exception $e) {
    echo "‚ùå Erreur lors du test: " . $e->getMessage() . "\n";
    echo "üìç Fichier: " . $e->getFile() . " ligne " . $e->getLine() . "\n";
    echo "üîç Trace:\n" . $e->getTraceAsString() . "\n";
    exit(1);
}
